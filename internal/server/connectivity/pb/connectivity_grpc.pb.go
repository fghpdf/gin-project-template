// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ConnectivityClient is the client API for Connectivity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectivityClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type connectivityClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectivityClient(cc grpc.ClientConnInterface) ConnectivityClient {
	return &connectivityClient{cc}
}

func (c *connectivityClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/Connectivity.Connectivity/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectivityServer is the server API for Connectivity service.
// All implementations must embed UnimplementedConnectivityServer
// for forward compatibility
type ConnectivityServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	mustEmbedUnimplementedConnectivityServer()
}

// UnimplementedConnectivityServer must be embedded to have forward compatible implementations.
type UnimplementedConnectivityServer struct {
}

func (UnimplementedConnectivityServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedConnectivityServer) mustEmbedUnimplementedConnectivityServer() {}

// UnsafeConnectivityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectivityServer will
// result in compilation errors.
type UnsafeConnectivityServer interface {
	mustEmbedUnimplementedConnectivityServer()
}

func RegisterConnectivityServer(s grpc.ServiceRegistrar, srv ConnectivityServer) {
	s.RegisterService(&_Connectivity_serviceDesc, srv)
}

func _Connectivity_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectivityServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Connectivity.Connectivity/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectivityServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Connectivity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Connectivity.Connectivity",
	HandlerType: (*ConnectivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Connectivity_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protocols/connectivity.proto",
}
